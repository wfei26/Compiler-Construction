Terminals which are not used

   DO
   FOR
   SWITCH
   CASE
   DEFAULT
   CONTINUE
   BREAK
   GOTO
   UNSIGNED
   STRUCT
   EXTERN
   REGISTER
   TYPEDEF
   UNION
   STATIC
   AUTO
   SIZEOF
   SETADD
   SETDIV
   SETAND
   SETRSH
   NOT
   COM
   SETMUL
   SETOR
   SETLSH
   SETSUB
   SETMOD
   SETXOR
   PREPROC


Grammar

    0 $accept: top $end

    1 top: /* empty */
    2    | function top

    3 function: func_signature '{' func_body '}'

    4 func_signature: type ID '(' args ')'

    5 args: /* empty */
    6     | expr
    7     | expr ',' args

    8 expr: INTVAL
    9     | type ID
   10     | CONST type ID
   11     | type ID '[' ']'

   12 func_body: declaration func_body
   13          | declaration
   14          | statement func_body
   15          | statement

   16 declaration: type ID ';'

   17 primaryExpression: INTVAL
   18                  | DBLVAL
   19                  | FLTVAL
   20                  | STRVAL
   21                  | CHARVAL
   22                  | ID
   23                  | func_call
   24                  | type ID
   25                  | CONST type ID
   26                  | type ID '[' ']'

   27 statement: openStatement
   28          | closeStatement

   29 openStatement: IF '(' expression ')' statement
   30              | IF '(' expression ')' closeStatement ELSE openStatement
   31              | WHILE '(' expression ')' openStatement

   32 closeStatement: simpleStatement
   33               | IF '(' expression ')' closeStatement ELSE closeStatement
   34               | WHILE '(' expression ')' closeStatement

   35 simpleStatement: assignment
   36                | returnStatement
   37                | blockStatement
   38                | func_call
   39                | func_call ';'

   40 assignment: ID SET expression ';'
   41           | ID SET expression
   42           | type ID SET expression ';'
   43           | type ID SET expression

   44 blockStatement: '{' blockExpression '}'

   45 blockExpression: statement
   46                | statement blockExpression

   47 returnStatement: RETURN expression
   48                | RETURN expression ';'

   49 expression: addOperation
   50           | addOperation equalOperation

   51 precedenceLevel1: MUL
   52                 | DIV
   53                 | MOD
   54                 | LSH
   55                 | RSH

   56 precedenceLevel2: BITOR
   57                 | BITAND
   58                 | BITXOR
   59                 | ADD
   60                 | SUB
   61                 | AND
   62                 | OR

   63 precedenceLevel3: GT
   64                 | LT
   65                 | EQ
   66                 | NE
   67                 | GE
   68                 | LE

   69 equalOperation: precedenceLevel3 addOperation
   70               | precedenceLevel3 addOperation equalOperation

   71 addOperation: multiOperation
   72             | multiOperation tempOperation

   73 tempOperation: precedenceLevel2 multiOperation
   74              | precedenceLevel2 multiOperation tempOperation

   75 multiOperation: primaryExpression
   76               | primaryExpression tempExpression

   77 tempExpression: precedenceLevel1 primaryExpression
   78               | precedenceLevel1 primaryExpression tempExpression

   79 func_call: ID '(' functionCallExpression ')'
   80          | ID '(' ')'

   81 functionCallExpression: expression
   82                       | expression ',' functionCallExpression

   83 type: VOID
   84     | SHORT
   85     | CHAR
   86     | INT
   87     | LONG
   88     | FLOAT
   89     | DOUBLE
   90     | VOID MUL
   91     | CHAR MUL
   92     | SHORT MUL
   93     | INT MUL
   94     | LONG MUL
   95     | FLOAT MUL
   96     | DOUBLE MUL


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 29 30 31 33 34 79 80
')' (41) 4 29 30 31 33 34 79 80
',' (44) 7 82
';' (59) 16 39 40 42 48
'[' (91) 11 26
']' (93) 11 26
'{' (123) 3 44
'}' (125) 3 44
error (256)
ID (258) 4 9 10 11 16 22 24 25 26 40 41 42 43 79 80
INTVAL (259) 8 17
DBLVAL (260) 18
FLTVAL (261) 19
STRVAL (262) 20
CHARVAL (263) 21
VOID (264) 83 90
SHORT (265) 84 92
CHAR (266) 85 91
INT (267) 86 93
LONG (268) 87 94
FLOAT (269) 88 95
DOUBLE (270) 89 96
RETURN (271) 47 48
DO (272)
WHILE (273) 31 34
FOR (274)
SWITCH (275)
CASE (276)
DEFAULT (277)
IF (278) 29 30 33
ELSE (279) 30 33
CONTINUE (280)
BREAK (281)
GOTO (282)
UNSIGNED (283)
STRUCT (284)
CONST (285) 10 25
EXTERN (286)
REGISTER (287)
TYPEDEF (288)
UNION (289)
STATIC (290)
AUTO (291)
SIZEOF (292)
EQ (293) 65
LE (294) 68
ADD (295) 59
DIV (296) 52
AND (297) 61
BITXOR (298) 58
LSH (299) 54
SETADD (300)
SETDIV (301)
SETAND (302)
SETRSH (303)
NE (304) 66
GT (305) 63
SUB (306) 60
MOD (307) 53
BITOR (308) 56
NOT (309)
RSH (310) 55
BITAND (311) 57
COM (312)
SET (313) 40 41 42 43
SETMUL (314)
SETOR (315)
SETLSH (316)
SETSUB (317)
SETMOD (318)
SETXOR (319)
GE (320) 67
LT (321) 64
MUL (322) 51 90 91 92 93 94 95 96
OR (323) 62
PREPROC (324)


Nonterminals, with rules where they appear

$accept (78)
    on left: 0
top (79)
    on left: 1 2, on right: 0 2
function (80)
    on left: 3, on right: 2
func_signature (81)
    on left: 4, on right: 3
args (82)
    on left: 5 6 7, on right: 4 7
expr (83)
    on left: 8 9 10 11, on right: 6 7
func_body (84)
    on left: 12 13 14 15, on right: 3 12 14
declaration (85)
    on left: 16, on right: 12 13
primaryExpression (86)
    on left: 17 18 19 20 21 22 23 24 25 26, on right: 75 76 77 78
statement (87)
    on left: 27 28, on right: 14 15 29 45 46
openStatement (88)
    on left: 29 30 31, on right: 27 30 31
closeStatement (89)
    on left: 32 33 34, on right: 28 30 33 34
simpleStatement (90)
    on left: 35 36 37 38 39, on right: 32
assignment (91)
    on left: 40 41 42 43, on right: 35
blockStatement (92)
    on left: 44, on right: 37
blockExpression (93)
    on left: 45 46, on right: 44 46
returnStatement (94)
    on left: 47 48, on right: 36
expression (95)
    on left: 49 50, on right: 29 30 31 33 34 40 41 42 43 47 48 81 82
precedenceLevel1 (96)
    on left: 51 52 53 54 55, on right: 77 78
precedenceLevel2 (97)
    on left: 56 57 58 59 60 61 62, on right: 73 74
precedenceLevel3 (98)
    on left: 63 64 65 66 67 68, on right: 69 70
equalOperation (99)
    on left: 69 70, on right: 50 70
addOperation (100)
    on left: 71 72, on right: 49 50 69 70
tempOperation (101)
    on left: 73 74, on right: 72 74
multiOperation (102)
    on left: 75 76, on right: 71 72 73 74
tempExpression (103)
    on left: 77 78, on right: 76 78
func_call (104)
    on left: 79 80, on right: 23 38 39
functionCallExpression (105)
    on left: 81 82, on right: 79 82
type (106)
    on left: 83 84 85 86 87 88 89 90 91 92 93 94 95 96,
    on right: 4 9 10 11 16 24 25 26 42 43


state 0

    0 $accept: . top $end

    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7

    $default  reduce using rule 1 (top)

    top             go to state 8
    function        go to state 9
    func_signature  go to state 10
    type            go to state 11


state 1

   83 type: VOID .
   90     | VOID . MUL

    MUL  shift, and go to state 12

    $default  reduce using rule 83 (type)


state 2

   84 type: SHORT .
   92     | SHORT . MUL

    MUL  shift, and go to state 13

    $default  reduce using rule 84 (type)


state 3

   85 type: CHAR .
   91     | CHAR . MUL

    MUL  shift, and go to state 14

    $default  reduce using rule 85 (type)


state 4

   86 type: INT .
   93     | INT . MUL

    MUL  shift, and go to state 15

    $default  reduce using rule 86 (type)


state 5

   87 type: LONG .
   94     | LONG . MUL

    MUL  shift, and go to state 16

    $default  reduce using rule 87 (type)


state 6

   88 type: FLOAT .
   95     | FLOAT . MUL

    MUL  shift, and go to state 17

    $default  reduce using rule 88 (type)


state 7

   89 type: DOUBLE .
   96     | DOUBLE . MUL

    MUL  shift, and go to state 18

    $default  reduce using rule 89 (type)


state 8

    0 $accept: top . $end

    $end  shift, and go to state 19


state 9

    2 top: function . top

    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7

    $default  reduce using rule 1 (top)

    top             go to state 20
    function        go to state 9
    func_signature  go to state 10
    type            go to state 11


state 10

    3 function: func_signature . '{' func_body '}'

    '{'  shift, and go to state 21


state 11

    4 func_signature: type . ID '(' args ')'

    ID  shift, and go to state 22


state 12

   90 type: VOID MUL .

    $default  reduce using rule 90 (type)


state 13

   92 type: SHORT MUL .

    $default  reduce using rule 92 (type)


state 14

   91 type: CHAR MUL .

    $default  reduce using rule 91 (type)


state 15

   93 type: INT MUL .

    $default  reduce using rule 93 (type)


state 16

   94 type: LONG MUL .

    $default  reduce using rule 94 (type)


state 17

   95 type: FLOAT MUL .

    $default  reduce using rule 95 (type)


state 18

   96 type: DOUBLE MUL .

    $default  reduce using rule 96 (type)


state 19

    0 $accept: top $end .

    $default  accept


state 20

    2 top: function top .

    $default  reduce using rule 2 (top)


state 21

    3 function: func_signature '{' . func_body '}'

    ID      shift, and go to state 23
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 24
    WHILE   shift, and go to state 25
    IF      shift, and go to state 26
    '{'     shift, and go to state 27

    func_body        go to state 28
    declaration      go to state 29
    statement        go to state 30
    openStatement    go to state 31
    closeStatement   go to state 32
    simpleStatement  go to state 33
    assignment       go to state 34
    blockStatement   go to state 35
    returnStatement  go to state 36
    func_call        go to state 37
    type             go to state 38


state 22

    4 func_signature: type ID . '(' args ')'

    '('  shift, and go to state 39


state 23

   40 assignment: ID . SET expression ';'
   41           | ID . SET expression
   79 func_call: ID . '(' functionCallExpression ')'
   80          | ID . '(' ')'

    SET  shift, and go to state 40
    '('  shift, and go to state 41


state 24

   47 returnStatement: RETURN . expression
   48                | RETURN . expression ';'

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression  go to state 49
    expression         go to state 50
    addOperation       go to state 51
    multiOperation     go to state 52
    func_call          go to state 53
    type               go to state 54


state 25

   31 openStatement: WHILE . '(' expression ')' openStatement
   34 closeStatement: WHILE . '(' expression ')' closeStatement

    '('  shift, and go to state 55


state 26

   29 openStatement: IF . '(' expression ')' statement
   30              | IF . '(' expression ')' closeStatement ELSE openStatement
   33 closeStatement: IF . '(' expression ')' closeStatement ELSE closeStatement

    '('  shift, and go to state 56


state 27

   44 blockStatement: '{' . blockExpression '}'

    ID      shift, and go to state 23
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 24
    WHILE   shift, and go to state 25
    IF      shift, and go to state 26
    '{'     shift, and go to state 27

    statement        go to state 57
    openStatement    go to state 31
    closeStatement   go to state 32
    simpleStatement  go to state 33
    assignment       go to state 34
    blockStatement   go to state 35
    blockExpression  go to state 58
    returnStatement  go to state 36
    func_call        go to state 37
    type             go to state 59


state 28

    3 function: func_signature '{' func_body . '}'

    '}'  shift, and go to state 60


state 29

   12 func_body: declaration . func_body
   13          | declaration .

    ID      shift, and go to state 23
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 24
    WHILE   shift, and go to state 25
    IF      shift, and go to state 26
    '{'     shift, and go to state 27

    $default  reduce using rule 13 (func_body)

    func_body        go to state 61
    declaration      go to state 29
    statement        go to state 30
    openStatement    go to state 31
    closeStatement   go to state 32
    simpleStatement  go to state 33
    assignment       go to state 34
    blockStatement   go to state 35
    returnStatement  go to state 36
    func_call        go to state 37
    type             go to state 38


state 30

   14 func_body: statement . func_body
   15          | statement .

    ID      shift, and go to state 23
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 24
    WHILE   shift, and go to state 25
    IF      shift, and go to state 26
    '{'     shift, and go to state 27

    $default  reduce using rule 15 (func_body)

    func_body        go to state 62
    declaration      go to state 29
    statement        go to state 30
    openStatement    go to state 31
    closeStatement   go to state 32
    simpleStatement  go to state 33
    assignment       go to state 34
    blockStatement   go to state 35
    returnStatement  go to state 36
    func_call        go to state 37
    type             go to state 38


state 31

   27 statement: openStatement .

    $default  reduce using rule 27 (statement)


state 32

   28 statement: closeStatement .

    $default  reduce using rule 28 (statement)


state 33

   32 closeStatement: simpleStatement .

    $default  reduce using rule 32 (closeStatement)


state 34

   35 simpleStatement: assignment .

    $default  reduce using rule 35 (simpleStatement)


state 35

   37 simpleStatement: blockStatement .

    $default  reduce using rule 37 (simpleStatement)


state 36

   36 simpleStatement: returnStatement .

    $default  reduce using rule 36 (simpleStatement)


state 37

   38 simpleStatement: func_call .
   39                | func_call . ';'

    ';'  shift, and go to state 63

    $default  reduce using rule 38 (simpleStatement)


state 38

   16 declaration: type . ID ';'
   42 assignment: type . ID SET expression ';'
   43           | type . ID SET expression

    ID  shift, and go to state 64


state 39

    4 func_signature: type ID '(' . args ')'

    INTVAL  shift, and go to state 65
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    CONST   shift, and go to state 66

    $default  reduce using rule 5 (args)

    args  go to state 67
    expr  go to state 68
    type  go to state 69


state 40

   40 assignment: ID SET . expression ';'
   41           | ID SET . expression

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression  go to state 49
    expression         go to state 70
    addOperation       go to state 51
    multiOperation     go to state 52
    func_call          go to state 53
    type               go to state 54


state 41

   79 func_call: ID '(' . functionCallExpression ')'
   80          | ID '(' . ')'

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48
    ')'      shift, and go to state 71

    primaryExpression       go to state 49
    expression              go to state 72
    addOperation            go to state 51
    multiOperation          go to state 52
    func_call               go to state 53
    functionCallExpression  go to state 73
    type                    go to state 54


state 42

   22 primaryExpression: ID .
   79 func_call: ID . '(' functionCallExpression ')'
   80          | ID . '(' ')'

    '('  shift, and go to state 41

    $default  reduce using rule 22 (primaryExpression)


state 43

   17 primaryExpression: INTVAL .

    $default  reduce using rule 17 (primaryExpression)


state 44

   18 primaryExpression: DBLVAL .

    $default  reduce using rule 18 (primaryExpression)


state 45

   19 primaryExpression: FLTVAL .

    $default  reduce using rule 19 (primaryExpression)


state 46

   20 primaryExpression: STRVAL .

    $default  reduce using rule 20 (primaryExpression)


state 47

   21 primaryExpression: CHARVAL .

    $default  reduce using rule 21 (primaryExpression)


state 48

   25 primaryExpression: CONST . type ID

    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7

    type  go to state 74


state 49

   75 multiOperation: primaryExpression .
   76               | primaryExpression . tempExpression

    DIV  shift, and go to state 75
    LSH  shift, and go to state 76
    MOD  shift, and go to state 77
    RSH  shift, and go to state 78
    MUL  shift, and go to state 79

    $default  reduce using rule 75 (multiOperation)

    precedenceLevel1  go to state 80
    tempExpression    go to state 81


state 50

   47 returnStatement: RETURN expression .
   48                | RETURN expression . ';'

    ';'  shift, and go to state 82

    $default  reduce using rule 47 (returnStatement)


state 51

   49 expression: addOperation .
   50           | addOperation . equalOperation

    EQ  shift, and go to state 83
    LE  shift, and go to state 84
    NE  shift, and go to state 85
    GT  shift, and go to state 86
    GE  shift, and go to state 87
    LT  shift, and go to state 88

    $default  reduce using rule 49 (expression)

    precedenceLevel3  go to state 89
    equalOperation    go to state 90


state 52

   71 addOperation: multiOperation .
   72             | multiOperation . tempOperation

    ADD     shift, and go to state 91
    AND     shift, and go to state 92
    BITXOR  shift, and go to state 93
    SUB     shift, and go to state 94
    BITOR   shift, and go to state 95
    BITAND  shift, and go to state 96
    OR      shift, and go to state 97

    $default  reduce using rule 71 (addOperation)

    precedenceLevel2  go to state 98
    tempOperation     go to state 99


state 53

   23 primaryExpression: func_call .

    $default  reduce using rule 23 (primaryExpression)


state 54

   24 primaryExpression: type . ID
   26                  | type . ID '[' ']'

    ID  shift, and go to state 100


state 55

   31 openStatement: WHILE '(' . expression ')' openStatement
   34 closeStatement: WHILE '(' . expression ')' closeStatement

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression  go to state 49
    expression         go to state 101
    addOperation       go to state 51
    multiOperation     go to state 52
    func_call          go to state 53
    type               go to state 54


state 56

   29 openStatement: IF '(' . expression ')' statement
   30              | IF '(' . expression ')' closeStatement ELSE openStatement
   33 closeStatement: IF '(' . expression ')' closeStatement ELSE closeStatement

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression  go to state 49
    expression         go to state 102
    addOperation       go to state 51
    multiOperation     go to state 52
    func_call          go to state 53
    type               go to state 54


state 57

   45 blockExpression: statement .
   46                | statement . blockExpression

    ID      shift, and go to state 23
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 24
    WHILE   shift, and go to state 25
    IF      shift, and go to state 26
    '{'     shift, and go to state 27

    $default  reduce using rule 45 (blockExpression)

    statement        go to state 57
    openStatement    go to state 31
    closeStatement   go to state 32
    simpleStatement  go to state 33
    assignment       go to state 34
    blockStatement   go to state 35
    blockExpression  go to state 103
    returnStatement  go to state 36
    func_call        go to state 37
    type             go to state 59


state 58

   44 blockStatement: '{' blockExpression . '}'

    '}'  shift, and go to state 104


state 59

   42 assignment: type . ID SET expression ';'
   43           | type . ID SET expression

    ID  shift, and go to state 105


state 60

    3 function: func_signature '{' func_body '}' .

    $default  reduce using rule 3 (function)


state 61

   12 func_body: declaration func_body .

    $default  reduce using rule 12 (func_body)


state 62

   14 func_body: statement func_body .

    $default  reduce using rule 14 (func_body)


state 63

   39 simpleStatement: func_call ';' .

    $default  reduce using rule 39 (simpleStatement)


state 64

   16 declaration: type ID . ';'
   42 assignment: type ID . SET expression ';'
   43           | type ID . SET expression

    SET  shift, and go to state 106
    ';'  shift, and go to state 107


state 65

    8 expr: INTVAL .

    $default  reduce using rule 8 (expr)


state 66

   10 expr: CONST . type ID

    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7

    type  go to state 108


state 67

    4 func_signature: type ID '(' args . ')'

    ')'  shift, and go to state 109


state 68

    6 args: expr .
    7     | expr . ',' args

    ','  shift, and go to state 110

    $default  reduce using rule 6 (args)


state 69

    9 expr: type . ID
   11     | type . ID '[' ']'

    ID  shift, and go to state 111


state 70

   40 assignment: ID SET expression . ';'
   41           | ID SET expression .

    ';'  shift, and go to state 112

    $default  reduce using rule 41 (assignment)


state 71

   80 func_call: ID '(' ')' .

    $default  reduce using rule 80 (func_call)


state 72

   81 functionCallExpression: expression .
   82                       | expression . ',' functionCallExpression

    ','  shift, and go to state 113

    $default  reduce using rule 81 (functionCallExpression)


state 73

   79 func_call: ID '(' functionCallExpression . ')'

    ')'  shift, and go to state 114


state 74

   25 primaryExpression: CONST type . ID

    ID  shift, and go to state 115


state 75

   52 precedenceLevel1: DIV .

    $default  reduce using rule 52 (precedenceLevel1)


state 76

   54 precedenceLevel1: LSH .

    $default  reduce using rule 54 (precedenceLevel1)


state 77

   53 precedenceLevel1: MOD .

    $default  reduce using rule 53 (precedenceLevel1)


state 78

   55 precedenceLevel1: RSH .

    $default  reduce using rule 55 (precedenceLevel1)


state 79

   51 precedenceLevel1: MUL .

    $default  reduce using rule 51 (precedenceLevel1)


state 80

   77 tempExpression: precedenceLevel1 . primaryExpression
   78               | precedenceLevel1 . primaryExpression tempExpression

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression  go to state 116
    func_call          go to state 53
    type               go to state 54


state 81

   76 multiOperation: primaryExpression tempExpression .

    $default  reduce using rule 76 (multiOperation)


state 82

   48 returnStatement: RETURN expression ';' .

    $default  reduce using rule 48 (returnStatement)


state 83

   65 precedenceLevel3: EQ .

    $default  reduce using rule 65 (precedenceLevel3)


state 84

   68 precedenceLevel3: LE .

    $default  reduce using rule 68 (precedenceLevel3)


state 85

   66 precedenceLevel3: NE .

    $default  reduce using rule 66 (precedenceLevel3)


state 86

   63 precedenceLevel3: GT .

    $default  reduce using rule 63 (precedenceLevel3)


state 87

   67 precedenceLevel3: GE .

    $default  reduce using rule 67 (precedenceLevel3)


state 88

   64 precedenceLevel3: LT .

    $default  reduce using rule 64 (precedenceLevel3)


state 89

   69 equalOperation: precedenceLevel3 . addOperation
   70               | precedenceLevel3 . addOperation equalOperation

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression  go to state 49
    addOperation       go to state 117
    multiOperation     go to state 52
    func_call          go to state 53
    type               go to state 54


state 90

   50 expression: addOperation equalOperation .

    $default  reduce using rule 50 (expression)


state 91

   59 precedenceLevel2: ADD .

    $default  reduce using rule 59 (precedenceLevel2)


state 92

   61 precedenceLevel2: AND .

    $default  reduce using rule 61 (precedenceLevel2)


state 93

   58 precedenceLevel2: BITXOR .

    $default  reduce using rule 58 (precedenceLevel2)


state 94

   60 precedenceLevel2: SUB .

    $default  reduce using rule 60 (precedenceLevel2)


state 95

   56 precedenceLevel2: BITOR .

    $default  reduce using rule 56 (precedenceLevel2)


state 96

   57 precedenceLevel2: BITAND .

    $default  reduce using rule 57 (precedenceLevel2)


state 97

   62 precedenceLevel2: OR .

    $default  reduce using rule 62 (precedenceLevel2)


state 98

   73 tempOperation: precedenceLevel2 . multiOperation
   74              | precedenceLevel2 . multiOperation tempOperation

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression  go to state 49
    multiOperation     go to state 118
    func_call          go to state 53
    type               go to state 54


state 99

   72 addOperation: multiOperation tempOperation .

    $default  reduce using rule 72 (addOperation)


state 100

   24 primaryExpression: type ID .
   26                  | type ID . '[' ']'

    '['  shift, and go to state 119

    $default  reduce using rule 24 (primaryExpression)


state 101

   31 openStatement: WHILE '(' expression . ')' openStatement
   34 closeStatement: WHILE '(' expression . ')' closeStatement

    ')'  shift, and go to state 120


state 102

   29 openStatement: IF '(' expression . ')' statement
   30              | IF '(' expression . ')' closeStatement ELSE openStatement
   33 closeStatement: IF '(' expression . ')' closeStatement ELSE closeStatement

    ')'  shift, and go to state 121


state 103

   46 blockExpression: statement blockExpression .

    $default  reduce using rule 46 (blockExpression)


state 104

   44 blockStatement: '{' blockExpression '}' .

    $default  reduce using rule 44 (blockStatement)


state 105

   42 assignment: type ID . SET expression ';'
   43           | type ID . SET expression

    SET  shift, and go to state 106


state 106

   42 assignment: type ID SET . expression ';'
   43           | type ID SET . expression

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression  go to state 49
    expression         go to state 122
    addOperation       go to state 51
    multiOperation     go to state 52
    func_call          go to state 53
    type               go to state 54


state 107

   16 declaration: type ID ';' .

    $default  reduce using rule 16 (declaration)


state 108

   10 expr: CONST type . ID

    ID  shift, and go to state 123


state 109

    4 func_signature: type ID '(' args ')' .

    $default  reduce using rule 4 (func_signature)


state 110

    7 args: expr ',' . args

    INTVAL  shift, and go to state 65
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    CONST   shift, and go to state 66

    $default  reduce using rule 5 (args)

    args  go to state 124
    expr  go to state 68
    type  go to state 69


state 111

    9 expr: type ID .
   11     | type ID . '[' ']'

    '['  shift, and go to state 125

    $default  reduce using rule 9 (expr)


state 112

   40 assignment: ID SET expression ';' .

    $default  reduce using rule 40 (assignment)


state 113

   82 functionCallExpression: expression ',' . functionCallExpression

    ID       shift, and go to state 42
    INTVAL   shift, and go to state 43
    DBLVAL   shift, and go to state 44
    FLTVAL   shift, and go to state 45
    STRVAL   shift, and go to state 46
    CHARVAL  shift, and go to state 47
    VOID     shift, and go to state 1
    SHORT    shift, and go to state 2
    CHAR     shift, and go to state 3
    INT      shift, and go to state 4
    LONG     shift, and go to state 5
    FLOAT    shift, and go to state 6
    DOUBLE   shift, and go to state 7
    CONST    shift, and go to state 48

    primaryExpression       go to state 49
    expression              go to state 72
    addOperation            go to state 51
    multiOperation          go to state 52
    func_call               go to state 53
    functionCallExpression  go to state 126
    type                    go to state 54


state 114

   79 func_call: ID '(' functionCallExpression ')' .

    $default  reduce using rule 79 (func_call)


state 115

   25 primaryExpression: CONST type ID .

    $default  reduce using rule 25 (primaryExpression)


state 116

   77 tempExpression: precedenceLevel1 primaryExpression .
   78               | precedenceLevel1 primaryExpression . tempExpression

    DIV  shift, and go to state 75
    LSH  shift, and go to state 76
    MOD  shift, and go to state 77
    RSH  shift, and go to state 78
    MUL  shift, and go to state 79

    $default  reduce using rule 77 (tempExpression)

    precedenceLevel1  go to state 80
    tempExpression    go to state 127


state 117

   69 equalOperation: precedenceLevel3 addOperation .
   70               | precedenceLevel3 addOperation . equalOperation

    EQ  shift, and go to state 83
    LE  shift, and go to state 84
    NE  shift, and go to state 85
    GT  shift, and go to state 86
    GE  shift, and go to state 87
    LT  shift, and go to state 88

    $default  reduce using rule 69 (equalOperation)

    precedenceLevel3  go to state 89
    equalOperation    go to state 128


state 118

   73 tempOperation: precedenceLevel2 multiOperation .
   74              | precedenceLevel2 multiOperation . tempOperation

    ADD     shift, and go to state 91
    AND     shift, and go to state 92
    BITXOR  shift, and go to state 93
    SUB     shift, and go to state 94
    BITOR   shift, and go to state 95
    BITAND  shift, and go to state 96
    OR      shift, and go to state 97

    $default  reduce using rule 73 (tempOperation)

    precedenceLevel2  go to state 98
    tempOperation     go to state 129


state 119

   26 primaryExpression: type ID '[' . ']'

    ']'  shift, and go to state 130


state 120

   31 openStatement: WHILE '(' expression ')' . openStatement
   34 closeStatement: WHILE '(' expression ')' . closeStatement

    ID      shift, and go to state 23
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 24
    WHILE   shift, and go to state 25
    IF      shift, and go to state 26
    '{'     shift, and go to state 27

    openStatement    go to state 131
    closeStatement   go to state 132
    simpleStatement  go to state 33
    assignment       go to state 34
    blockStatement   go to state 35
    returnStatement  go to state 36
    func_call        go to state 37
    type             go to state 59


state 121

   29 openStatement: IF '(' expression ')' . statement
   30              | IF '(' expression ')' . closeStatement ELSE openStatement
   33 closeStatement: IF '(' expression ')' . closeStatement ELSE closeStatement

    ID      shift, and go to state 23
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 24
    WHILE   shift, and go to state 25
    IF      shift, and go to state 26
    '{'     shift, and go to state 27

    statement        go to state 133
    openStatement    go to state 31
    closeStatement   go to state 134
    simpleStatement  go to state 33
    assignment       go to state 34
    blockStatement   go to state 35
    returnStatement  go to state 36
    func_call        go to state 37
    type             go to state 59


state 122

   42 assignment: type ID SET expression . ';'
   43           | type ID SET expression .

    ';'  shift, and go to state 135

    $default  reduce using rule 43 (assignment)


state 123

   10 expr: CONST type ID .

    $default  reduce using rule 10 (expr)


state 124

    7 args: expr ',' args .

    $default  reduce using rule 7 (args)


state 125

   11 expr: type ID '[' . ']'

    ']'  shift, and go to state 136


state 126

   82 functionCallExpression: expression ',' functionCallExpression .

    $default  reduce using rule 82 (functionCallExpression)


state 127

   78 tempExpression: precedenceLevel1 primaryExpression tempExpression .

    $default  reduce using rule 78 (tempExpression)


state 128

   70 equalOperation: precedenceLevel3 addOperation equalOperation .

    $default  reduce using rule 70 (equalOperation)


state 129

   74 tempOperation: precedenceLevel2 multiOperation tempOperation .

    $default  reduce using rule 74 (tempOperation)


state 130

   26 primaryExpression: type ID '[' ']' .

    $default  reduce using rule 26 (primaryExpression)


state 131

   31 openStatement: WHILE '(' expression ')' openStatement .

    $default  reduce using rule 31 (openStatement)


state 132

   34 closeStatement: WHILE '(' expression ')' closeStatement .

    $default  reduce using rule 34 (closeStatement)


state 133

   29 openStatement: IF '(' expression ')' statement .

    $default  reduce using rule 29 (openStatement)


state 134

   28 statement: closeStatement .
   30 openStatement: IF '(' expression ')' closeStatement . ELSE openStatement
   33 closeStatement: IF '(' expression ')' closeStatement . ELSE closeStatement

    ELSE  shift, and go to state 137

    $default  reduce using rule 28 (statement)


state 135

   42 assignment: type ID SET expression ';' .

    $default  reduce using rule 42 (assignment)


state 136

   11 expr: type ID '[' ']' .

    $default  reduce using rule 11 (expr)


state 137

   30 openStatement: IF '(' expression ')' closeStatement ELSE . openStatement
   33 closeStatement: IF '(' expression ')' closeStatement ELSE . closeStatement

    ID      shift, and go to state 23
    VOID    shift, and go to state 1
    SHORT   shift, and go to state 2
    CHAR    shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    RETURN  shift, and go to state 24
    WHILE   shift, and go to state 25
    IF      shift, and go to state 26
    '{'     shift, and go to state 27

    openStatement    go to state 138
    closeStatement   go to state 139
    simpleStatement  go to state 33
    assignment       go to state 34
    blockStatement   go to state 35
    returnStatement  go to state 36
    func_call        go to state 37
    type             go to state 59


state 138

   30 openStatement: IF '(' expression ')' closeStatement ELSE openStatement .

    $default  reduce using rule 30 (openStatement)


state 139

   33 closeStatement: IF '(' expression ')' closeStatement ELSE closeStatement .

    $default  reduce using rule 33 (closeStatement)
